<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title></title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div>
      <h1>GarbageCollector monitor</h1>
    </div>

    <div>
      <button id="refresh">Refresh</button>
    </div>

    <div>
      <table id="data">
        <tr>
          <th>Garbage ID</th>
          <th>Bat</th>
          <th>Garbage height</th>
          <th>Garbage weight</th>
          <th>Humidity</th>
          <th>Pressure</th>
          <th>Temperature</th>
          <th>Time (TLR)</th>
        </tr>
      </table>
    </div>
    
    <script>
      const getData = async () => {
        const response = await fetch('/api');
        const data = await response.json();
        return data;
      }

      const displayData = async () => {
        const data = await getData();
        
        for (const [key, value] of Object.entries(data)) {
          const date = new Date(value.timestamp);
          const batVoltage = (value.bat / 255) * 0.9 + 3.3;
          const garbageFill = (1 - value.garbage_h / 80) * 100;
          
          if (document.getElementById(key)) {
            document.getElementById(key).innerHTML = `
              <td>${key}</td>
              <td>${batVoltage.toFixed(2)} V</td>
              <td>${garbageFill.toFixed(2)} %</td>
              <td>${value.garbage_w/10} kg</td>
              <td>${value.hum} %rH</td>
              <td>${value.pres} hPa</td>
              <td>${value.temp} °C</td>
              <td>${date.toLocaleString()}</td>
            `;
          } else {
            const row = document.createElement('tr');
            row.id = key;
            row.innerHTML = `
              <td>${key}</td>
              <td>${batVoltage.toFixed(2)} V</td>
              <td>${garbageFill.toFixed(2)} %</td>
              <td>${value.garbage_w/10} kg</td>
              <td>${value.hum} %rH</td>
              <td>${value.pres} hPa</td>
              <td>${value.temp} °C</td>
              <td>${date.toLocaleString()}</td>
            `;
            document.getElementById('data').appendChild(row);
          }
        }
        setStyle()
      }

      // Set style for table
      // If garbage is 100% full, set background to red, if above 75% set to yellow with black text
      const setStyle = () => {
        const rows = document.getElementById('data').getElementsByTagName('tr');
        for (let i = 1; i < rows.length; i++) {
          const cells = rows[i].getElementsByTagName('td');
          const garbageFill = parseFloat(cells[2].innerHTML);
          if (garbageFill >= 100) {
            rows[i].style.backgroundColor = 'red';
            rows[i].style.color = 'white';
          } else if (garbageFill >= 75) {
            rows[i].style.backgroundColor = 'yellow';
            rows[i].style.color = 'black';
          } else {
            rows[i].style.backgroundColor = 'white';
            rows[i].style.color = 'black';
          }
        }
      }

      const refreshButton = document.getElementById('refresh');
      refreshButton.addEventListener('click', displayData);

      setInterval(displayData, 5000);

    </script>
  </body>
</html>