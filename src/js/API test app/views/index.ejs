<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title></title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div>
      <h1>GarbageCollector monitor</h1>
    </div>

    <div>
      <button id="refresh">Refresh</button>
    </div>

    <div>
      <table id="data">
        <tr>
          <th>Garbage ID</th>
          <th>Bat</th>
          <th>Garbage height</th>
          <th>Garbage weight</th>
          <th>Humidity</th>
          <th>Pressure</th>
          <th>Temperature</th>
          <th>Time (TLR)</th>
        </tr>
      </table>
    </div>

    <div id="messages">
      
    </div>
    
    <script>
      const getData = async () => {
        const response = await fetch('/api');
        const data = await response.json();
        return data;
      }

      const displayData = async () => {
        const data = await getData();
        
        for (const [key, value] of Object.entries(data)) {
          const date = new Date(value.timestamp);
          const batVoltage = (value.bat / 255) * 0.9 + 3.3;
          const garbageFill = (1 - value.garbage_h / 80) * 100;
          
          if (document.getElementById(key)) {
            document.getElementById(key).innerHTML = `
              <td>${key}</td>
              <td>${batVoltage.toFixed(2)} V</td>
              <td>${garbageFill.toFixed(2)} %</td>
              <td>${value.garbage_w/10} kg</td>
              <td>${value.hum} %rH</td>
              <td>${value.pres} hPa</td>
              <td>${value.temp} °C</td>
              <td>${date.toLocaleString()}</td>
            `;
          } else {
            const row = document.createElement('tr');
            row.id = key;
            row.innerHTML = `
              <td>${key}</td>
              <td>${batVoltage.toFixed(2)} V</td>
              <td>${garbageFill.toFixed(2)} %</td>
              <td>${value.garbage_w/10} kg</td>
              <td>${value.hum} %rH</td>
              <td>${value.pres} hPa</td>
              <td>${value.temp} °C</td>
              <td>${date.toLocaleString()}</td>
            `;
            document.getElementById('data').appendChild(row);
          }
        }
        // Sort table by ID
        const table = document.getElementById('data');
        const rows = table.getElementsByTagName('tr');
        const sortedRows = Array.from(rows).slice(1).sort((a, b) => {
          return a.id - b.id;
        });
        for (const row of sortedRows) {
          table.appendChild(row);
        }

        setStyle()
      }

      // Set style for table
      const setStyle = () => {
        let messageData = {};
        const rows = document.getElementById('data').getElementsByTagName('tr');
        for (let i = 1; i < rows.length; i++) {
          // check if ID exists in messageData
          // if not, add it with an empty {}
          if (!messageData[rows[i].id]) {
            messageData[rows[i].id] = {height: 0, weight: 0, bat: 0};
          }

          const cells = rows[i].getElementsByTagName('td');

          const garbageFill = parseFloat(cells[2].innerHTML);
          if (garbageFill >= 100) {
            cells[2].style.backgroundColor = '#DE0001';
            cells[2].style.color = 'white';

            messageData[rows[i].id].height = 2;
          } else if (garbageFill >= 75) {
            cells[2].style.backgroundColor = '#FEDA15';
            cells[2].style.color = 'black';
            messageData[rows[i].id].height = 1;
          } else {
            cells[2].style.backgroundColor = '';
            cells[2].style.color = '';
            messageData[rows[i].id].height = 0;
          }

          const batVoltage = parseFloat(cells[1].innerHTML);
          if (batVoltage < 3.5) {
            cells[1].style.backgroundColor = '#DE0001';
            cells[1].style.color = 'white';
            messageData[rows[i].id].bat = 2;
          } else if (batVoltage <= 3.9) {
            cells[1].style.backgroundColor = '#FEDA15';
            cells[1].style.color = 'black';
            messageData[rows[i].id].bat = 1;
          } else {
            cells[1].style.backgroundColor = '';
            cells[1].style.color = '';
            messageData[rows[i].id].bat = 0;
          }

          const weight = parseFloat(cells[3].innerHTML);
          if (weight >= 10) {
            cells[3].style.backgroundColor = '#DE0001';
            cells[3].style.color = 'white';
            messageData[rows[i].id].weight = 2;
          } else if (weight >= 7) {
            cells[3].style.backgroundColor = '#FEDA15';
            cells[3].style.color = 'black';
            messageData[rows[i].id].weight = 1;
          } else {
            cells[3].style.backgroundColor = '';
            cells[3].style.color = '';
            messageData[rows[i].id].weight = 0;
          }
        }

        // Display messages for each garbage in messageData
        let message = '';
        for (const [key, value] of Object.entries(messageData)) {
          let line = ''
          if (value.height === 2 || value.weight === 2 || value.bat === 2 || value.height === 1 || value.weight === 1 || value.bat === 1) {
            line = `<p>Garbage ${key} `;
          }

          if (value.height === 2 && value.weight === 0 && value.bat === 0) {
            line += 'is full. ';
          } else if (value.height === 1 && value.weight === 0 && value.bat === 0) {
            line += 'is almost full. ';
          } else {
            if (value.height === 2) {
              line += 'is full ';
            } else if (value.height === 1) {
              line += 'is nearly full ';
            }

            if (value.weight === 2 && value.bat === 0) {
              line += 'and is heavy. ';
            } else if (value.weight === 1 && value.bat === 0) {
              line += 'and is nearly heavy. ';
            } else if (value.bat === 2 && value.weight === 0) {
              line += 'and has low battery. ';
            } else if (value.bat === 1 && value.weight === 0) {
              line += 'and has nearly low battery. ';
            } else {
              if (value.height === 2) {
                line += ', ';
              } else if (value.height === 1) {
                line += ', ';
              }

              if (value.weight === 2) {
                line += 'is heavy ';
              } else if (value.weight === 1) {
                line += 'is nearly heavy ';
              }

              if (value.bat === 2) {
                line += 'and has low battery. ';
              } else if (value.bat === 1) {
                line += 'and has nearly low battery. ';
              }
            }
          }

          if (line !== '') {
            line += '</p>';
            message += line;
          }
        }

        document.getElementById('messages').innerHTML = message;
      }

      const refreshButton = document.getElementById('refresh');
      refreshButton.addEventListener('click', displayData);

      setInterval(displayData, 5000);

    </script>
  </body>
</html>